#ifndef ERROR_H
#define ERROR_H

typedef enum error_type {
    PERIOD_EXPECTED = 1,
    IDENTIFIER_EXPECTED_CONST_DECLARATION,
    EQUALS_EXPECTED_CONST_DECLARATION,
    NUMBER_EXPECTED_CONST_DECLARATION,
    SEMICOLON_EXPECTED_CONST_DECLARATION,
    IDENTIFIER_EXPECTED_VAR_DECLARATION,
    SEMICOLON_EXPECTED_VAR_DECLARATION,
    BECOMES_EXPECTED_ASSIGNMENT_STATEMENT,
    END_EXPECTED_BEGIN_STATEMENT,
    THEN_EXPECTED_IF_STATEMENT,
    DO_EXPECTED_WHILE_STATEMENT,
    IDENTIFIER_EXPECTED_READ_STATEMENT,
    IDENTIFIER_EXPECTED_WRITE_STATEMENT,
    REL_OP_EXPECTED,
    INVALID_EXPRESSION,
    RIGHT_PARENTHESIS_EXPECTED_FACTOR,
    EXCEEDED_MAX_CODE_LENGTH,
    UNDECLARED_IDENTIFIER,
    ASSIGNMENT_TO_NON_VARIABLE,
    NON_VAR_CONST_IDENTIFIER_FACTOR,
    READ_INTO_INVALID_IDENTIFIER,
    READ_INTO_NON_VARIABLE,
    WRITE_FROM_INVALID_IDENTIFIER,
    WRITE_FROM_NON_VAR_CONST_IDENTIFIER,
    IDENTIFIER_ALREADY_DECLARED
} error_type;

void error(error_type e);

#endif /* ERROR_H */
